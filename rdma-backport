#!/usr/bin/ruby

require 'optparse'

opts = {
    :base_ver => 0,
    :commits => [],
    :do_push => false,
    :br_suff => "master",
}

optsParser = OptionParser.new(nil, 60)
optsParser.banner = "Usage: #{__FILE__}  [-v <min_version>] [-c <SHA1> [-c <SHA1> [...]]]"
optsParser.separator ""
optsParser.separator "Options:"
optsParser.on("-h", "--help", "Display usage.") { |val| puts optsParser.to_s; exit 0 }
optsParser.on("-v", "--base-version <[0-9]*>", Integer, "Older release to consider.") {
    |val| opts[:base_ver] = val}
optsParser.on("-c", "--sha1 <sha1>", String, "Commit to cherry-pick. Can be used multiple time.") {
    |val| opts[:commits] << val}
optsParser.on("-p", "--[no-]push", "Push branches to github for Travis review.") {
    |val| opts[:do_push] = val}
optsParser.on("-b", "--branch-suffix <suffix>", "Branch suffix. Default is 'master'.") {
    |val| opts[:br_suff] = val}

rest = optsParser.parse!(ARGV);

#`git fetch stable`
STABLE_LIST=`git branch`.split("\n").map(){|x|
    x=~ /dev\/stable-v[0-9][0-9]\/#{opts[:br_suff]}/ ?
        x.gsub(/\*?\s*dev\/stable-v([0-9][0-9])\/#{opts[:br_suff]}\s*$/, '\1') :
        nil}.compact()

STABLE_LIST.each(){|stable|
    if stable.to_i < opts[:base_ver] then
        puts "Skipping older v#{stable}"
        next
    end
    puts "Backporting for v#{stable}"
    puts `git checkout dev/stable-v#{stable}/#{opts[:br_suff]}`
    if $? != 0 then
        STDERR.puts "Error"
        exit 1
    end

    if opts[:commits].length > 0 then
        `git cherry-pick #{opts[:commits].join(" ")}`
        if $? != 0 then
            puts "Cherry pick failure. Starting bash for manual fixes. Exit shell to continue"
			`bash`
            puts "Continuing..."
		end
    end
    if opts[:do_push] == true then
        puts `git push github dev/stable-v#{stable}/#{opts[:br_suff]}`
    end
}
